@page "/css-extraction"
@using System.Text.RegularExpressions;
@attribute [AllowAnonymous]

<h3>CSS Selector Extraction</h3>

<MudFileUpload T="IBrowserFile" Accept=".css" OnFilesChanged="CssFileSelected" MaximumFileCount="100">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context">
            Select Css File
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>

<MudFileUpload T="IBrowserFile" Accept=".html" OnFilesChanged="HtmlFileSelected" MaximumFileCount="100">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context">
            Select Html File
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>

@if (htmlFile != null )
{
    <button @onclick="ExtractSelectors">Extract CSS Selectors</button>
}
@if (extractedSelectors != null)
{
    <h4>Extracted CSS Selectors:</h4>
    <ul>
        @foreach (string selector in extractedSelectors)
        {
            <li>@selector</li>
        }
    </ul>
}

@code {
    private ElementReference fileInput;
    private HashSet<string> extractedSelectors = new();
    IBrowserFile? cssFile;
    IBrowserFile? htmlFile;
    long maxFileSize = 1024 * 1024 * 3;

    void CssFileSelected(InputFileChangeEventArgs eventArgs)
    {
        cssFile = eventArgs.File;
    }

    void HtmlFileSelected(InputFileChangeEventArgs eventArgs)
    {
        htmlFile = eventArgs.File;
    }

    private async Task<string> ReadFileContent(IBrowserFile file)
    {

        using var reader = new StreamReader(file.OpenReadStream(maxFileSize));
        return await reader.ReadToEndAsync();
    }

    private async void ExtractSelectors()
    {
        //var cssData = await ReadFileContent(cssFile!);
        var htmlData = await ReadFileContent(htmlFile!);
        //Console.WriteLine(htmlData);
        var pattern = @"(?<=class=|id=)[""']([^""']+)";
        var matches = Regex.Matches(htmlData, pattern, RegexOptions.IgnoreCase);

        extractedSelectors = new HashSet<string>();

        foreach (Match match in matches)
        {
            var selector = match.Groups[1].Value;
            extractedSelectors.Add(selector);
            StateHasChanged();
        }
    }
}
