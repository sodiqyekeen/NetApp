@layout UnauthorizedLayout
@attribute [Route(ApplicationConstants.Routes.ResetPassword)]
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager
@inject IIdentityService IdentityService

<MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">Reset Password</MudText>
<MudText Typo="Typo.body2" Align="Align.Center">Have you already reset the password? <MudLink Typo="Typo.body2"
        Href="@(ApplicationConstants.Routes.Login)">Sign in</MudLink>
</MudText>
<MudPaper Elevation="0" Class="px-4 pt-4">
    <EditForm Model="request" class="mt-4" OnValidSubmit="Submit">
        <DataAnnotationsValidator />

        <PasswordTextField Label="Password" Class="my-6" @bind-Value="request.Password"
            For="@(() => request.Password)" />

        <PasswordTextField Label="Confirm Password" Class="" @bind-Value="request.ConfirmPassword"
            For="@(() => request.ConfirmPassword)" />

        <MudButton Class="mb-4 mt-6" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Size="Size.Large"
            Color="Color.Primary" FullWidth="true">Submit</MudButton>
    </EditForm>
</MudPaper>

@code {
    // [Parameter] public string UserId { get; set; }
    // [Parameter] public string Token { get; set; }
    ResetPasswordRequest request = new();

    void NavigateToLogin()
    {
        NavigationManager.NavigateTo(ApplicationConstants.Routes.Login);
    }

    async Task Submit()
    {
        // var result = await IdentityService.ResetPasswordAsync(request);
        // if (result.Succeeded)
        // {
        // Snackbar.Add("Your password has been reset.", Severity.Success);
        // NavigationManager.NavigateTo(ApplicationConstants.Routes.Login);
        // }
    }

}
