@using System.Linq.Expressions

<MudTextField Label="@Label"
              Variant="@Variant"
              T="string"
              ValueChanged="OnValueChanged"
              For="@For"
              InputType="@passwordInputType"
              Adornment="Adornment.End"
              AdornmentIcon="@passwordInputIcon"
              OnAdornmentClick="TogglePasswordVisibility"
              Class="@Class"
              autocomplete="off" />


@code {

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public Expression<Func<string>>? For { get; set; }

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    bool passwordVisibility;
    string passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType passwordInputType = InputType.Password;

    void OnValueChanged(string value)
    {
        Value = value;
        ValueChanged.InvokeAsync(value);
    }

    void TogglePasswordVisibility()
    {
        if (passwordVisibility)
        {
            passwordVisibility = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            passwordInputType = InputType.Password;
        }
        else
        {
            passwordVisibility = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            passwordInputType = InputType.Text;
        }
    }
}
