@namespace NetApp.Pwa.Pages
@attribute [Route(ApplicationConstants.Routes.Roles)]
@inject IRoleService RoleService
@inject IDialogService DialogService
@inject IDispatcher Dispatcher
@inject ISnackbar Snackbar
@implements IDisposable
<AuthorizeView>
 @{
    var canCreateRole = context.CanCreateRole();
    var canManagePermissions = context.CanManagePermissions();
    var canDeleteRole = context.CanDeleteRole();
    var canEditRole = context.CanEditRole();
 }
<MudGrid>
    @foreach (var role in roles.OrderBy(r => r.Name))
    {
        <MudItem md="3">
            <MudPaper Elevation="0" Height="100%" Class="relative pa-4 pt-6 pb-6">
                @if(canDeleteRole)
                {
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(()=> DeleteRoleAsync(role.Id))" Color="Color.Error" style="position: absolute; right:5px; top:10px;" />
                }
                <MudStack Style="height:100%" Justify="Justify.SpaceBetween">
                    <div>
                        <MudText Typo="Typo.h6">@role.Name</MudText>
                        <MudText  Typo="Typo.body2">@role.Description </MudText>
                    </div>
                    <MudPaper Height="100%" Elevation="0" Class="pt-2">
                        <ul>
                            @foreach (var permission in role.Permissions.Take(5))
                            {
                                <li><span class="bullet"></span> <MudText Class="d-inline-block" Typo="Typo.body2">@permission</MudText></li>
                            }
                            @if (role.Permissions.Count > 5)
                            {
                                <li><span class="bullet"></span> <MudText Class="d-inline-block" Typo="Typo.body2">and @(role.Permissions.Count - 5) more...</MudText></li>
                            }
                        </ul>
                    </MudPaper>
                    <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Spacing="2">
                        @if(canEditRole)
                        {
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Class="ml-2" OnClick="(() => OpenRoleDialogAsync(role.Id))" >Edit</MudButton>
                        }
                        @if(canManagePermissions)
                        {
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Class="ml-2" Href="@($"/user-management/roles/{role.Id}/permissions")" >Manage Permissions</MudButton>
                        }
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
    }    
    @if(canCreateRole){
        <MudItem md="3">
            <MudPaper Elevation="0" Height="100%" Class="pa-6 ">
                <MudLink OnClick="(() => OpenRoleDialogAsync(null))">
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="6" Style="height:100% !important">
                    <MudIcon  Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="width:150px; height:150px;"></MudIcon>
                    <MudText Typo="Typo.h6">Add Role</MudText>
                </MudStack>
                </MudLink>
            </MudPaper>
        </MudItem>
    }
</MudGrid>
</AuthorizeView>
@code {
    IEnumerable<RoleWithPermissionsResponse> roles = [];
    CancellationTokenSource cancellationTokenSource = new();
    [CascadingParameter] private HubConnection HubConnection { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        Dispatcher.ToggleLoader(true);
        await LoadRolesAsync();
        Dispatcher.ToggleLoader(false);
        HubConnection.On(SharedConstants.SignalR.OnRolesUpdated, async () =>
        {
            await LoadRolesAsync();
        });
    }

    private async Task OpenRoleDialogAsync(string? roleId)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(RoleDialog.RoleId), roleId);
        var dialog = DialogService.Show<RoleDialog>("Save Role", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await HubConnection.InvokeHubMethodAsync(SharedConstants.SignalR.NotifyRolesUpdated);
            await LoadRolesAsync();
        }
    }

    private async Task DeleteRoleAsync(string roleId)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(ConfirmationDialog.ContentText), "Are you sure you want to delete this role?");
        parameters.Add(nameof(ConfirmationDialog.ConfirmButtonText), "Delete");
        parameters.Add(nameof(ConfirmationDialog.IsDelete), true);
        parameters.Add(nameof(ConfirmationDialog.Title), "Delete Role");

        var dialog = DialogService.Show<ConfirmationDialog>("Delete Role", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Dispatcher.ToggleLoader(true);
            var response = await RoleService.DeleteRoleAsync(roleId);
            if(response.Succeeded)
            {
                await LoadRolesAsync();
                Dispatcher.ToggleLoader(false);
                Snackbar.Add(response.Message, Severity.Success);
            }
            else
            {
                Dispatcher.ToggleLoader(false);
                Snackbar.Add(response.Message, Severity.Error);
            }
                        
            StateHasChanged();
        }
    }

    private async Task LoadRolesAsync()
    {
        roles = await RoleService.GetAllRolesWithPermissionsAsync(cancellationTokenSource.Token);
    }

    public void Dispose()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
    }
}
