@layout UnauthorizedLayout
@attribute [Route(ApplicationConstants.Routes.ForgotPassword)]
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager
@inject IIdentityService IdentityService
@inject ISnackbar Snackbar
@inject IDispatcher Dispatcher


<MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">Forgot Password</MudText>
<MudText Typo="Typo.body2" Align="Align.Center">Enter your email to reset your password.</MudText>
<MudPaper Elevation="0" Class="px-4 pt-4">
    <EditForm Model="request" class="mt-4" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <MudTextField Class="my-6" Variant="Variant.Outlined" T="string" Label="E-mail" @bind-Value="request.Email"
            For="@(() => request.Email)" autocomplete="off" />
        <div class="mt-4 d-flex justify-center">
            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="NavigateToLogin">Cancel</MudButton>
            <MudButton Class="mr-4" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary">Submit
            </MudButton>
        </div>
    </EditForm>
</MudPaper>


@code {
    ForgotPasswordRequest request = new();

    void NavigateToLogin()
    {
        NavigationManager.NavigateTo(ApplicationConstants.Routes.Login);
    }

    async void Submit()
    {
        Dispatcher.ToggleLoader(true);
        var result = await IdentityService.ForgotPasswordAsync(request);
        Dispatcher.ToggleLoader(false);
        if (result.Succeeded)
        {
            Snackbar.Add("Please check your email for a password reset link.", Severity.Success);
            NavigationManager.NavigateTo(ApplicationConstants.Routes.ResetPassword);
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error);
        }
    }
}
