@namespace NetApp.Pwa.Pages
@page "/user-management/roles/{RoleId}/permissions"
@inject IRoleService RoleService
@inject IDispatcher Dispatcher
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (permissionResponse is not null)
{
    <MudTabs Elevation="25" Rounded="true" Centered="true" ApplyEffectsToContainer="true" AlwaysShowScrollButtons="true">
    @foreach (var module in permissionResponse.RolePermissions.OrderBy(p => p.Name))
        {
            var selectedCount = module.Permissions.Count(p => p.Selected);
            <MudTabPanel Text="@module.Name" Style="padding-right: 43px;"
                BadgeData="@($"{selectedCount} / {module.Permissions.Count}")"
                BadgeColor="@GetGroupBadgeColor(selectedCount, module.Permissions.Count)">

                <MudTable Hover=" true" Elevation="25" Items="@module.Permissions.OrderBy(p => p.Name)">
                    <ToolBarContent>
                        <MudHidden Breakpoint="Breakpoint.Xs">

                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                                ButtonType="ButtonType.Submit" OnClick="UpdatePermissionsAsync">Update Permissions</MudButton>

                            <MudSpacer />
                        </MudHidden>

                        <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth=false Placeholder="Search"
                            Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                            Class="mt-0 mb-3"></MudTextField>

                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Permission Name">
                            <MudHighlighter Text="@context.Name" HighlightedText="@_searchString" />
                        </MudTd>
                        <MudTd DataLabel="Description">
                            <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
                        </MudTd>

                        <MudTd DataLabel="Status">
                            <MudCheckBox @bind-Checked="@context.Selected" Color="Color.Secondary" />
                        </MudTd>
                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudTabPanel>
        }
    </MudTabs>
    <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">

</MudHidden>
}
@code {

    [Parameter]
    public string RoleId { get; set; } = default!;

    private PermissionResponse? permissionResponse;
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.ToggleLoader(true);
        permissionResponse = await RoleService.GetAllPermissionsAsync(RoleId);
        Dispatcher.ToggleLoader(false);
    }

    private Color GetGroupBadgeColor(int selected, int all) =>
    selected switch
    {
        0 => Color.Error,
        _ => selected == all ? Color.Success : Color.Info
    };

    private async Task UpdatePermissionsAsync()
    {
        Dispatcher.ToggleLoader(true);
        var request = new PermissionRequest
            {
                RoleId = RoleId,
                Permissions = permissionResponse!.RolePermissions.SelectMany(p => p.Permissions).Select(p => new PermissionBase(p.Value,
                p.Selected)).ToList()
            };
        var response = await RoleService.UpdatePermissionsAsync(request);
        Dispatcher.ToggleLoader(false);
        if (response.Succeeded)
        {
            Snackbar.Add(response.Message, Severity.Success);
            NavigationManager.NavigateTo(ApplicationConstants.Routes.Roles);
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
        }
    }
}
