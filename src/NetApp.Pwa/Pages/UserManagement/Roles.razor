@namespace NetApp.Pwa.Pages
@attribute [Route(ApplicationConstants.Routes.Roles)]
@inject IRoleService RoleService
@inject IDialogService DialogService
@implements IDisposable
<MudGrid>
    @foreach (var role in roles)
    {
        <MudItem md="3">
            <MudPaper Elevation="0" Height="100%" Class="pa-4 pt-6">
                <MudStack Style="height:100% !important" Justify="Justify.SpaceBetween">
                    <div>
                        <MudText Typo="Typo.h6">@role.Name</MudText>
                        <MudText Class="mt-4" Typo="Typo.body2">@role.Description </MudText>
                    </div>
                    <div class="pt-2 pl-2">
                        <ul>
                            @foreach (var permission in role.Permissions.Take(5))
                            {
                                <li><span class="bullet"></span> <MudText Class="d-inline-block" Typo="Typo.body2">@permission</MudText></li>
                            }
                            @if (role.Permissions.Count > 5)
                            {
                                <li><span class="bullet"></span> <MudText Class="d-inline-block" Typo="Typo.body2">and @(role.Permissions.Count - 5) more...</MudText></li>
                            }
                        </ul>
                    </div>
                    <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Spacing="2">
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Class="ml-2" OnClick="(() => OpenRoleDialogAsync(role.Id))" >Edit</MudButton>
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Class="ml-2" Href="@($"/user-management/roles/{role.Id}/permissions")" >Manage Permissions</MudButton>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
    }    
    <MudItem md="3">
        <MudPaper Elevation="0" Height="100%" Class="pa-6 ">
            <MudLink OnClick="(() => OpenRoleDialogAsync(null))">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="6" Style="height:100% !important">
                <MudIcon  Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="width:150px; height:150px;"></MudIcon>
                <MudText Typo="Typo.h6">Add Role</MudText>
            </MudStack>
            </MudLink>
        </MudPaper>
    </MudItem>

</MudGrid>

@code {
    IEnumerable<RoleWithPermissionsResponse> roles = [];
    CancellationTokenSource cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        roles = await RoleService.GetAllRolesWithPermissionsAsync(cancellationTokenSource.Token);
    }

    private async Task OpenRoleDialogAsync(string? roleId)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(RoleDialog.RoleId), roleId);
        var dialog = DialogService.Show<RoleDialog>("Save Role", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            roles = await RoleService.GetAllRolesWithPermissionsAsync(cancellationTokenSource.Token);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
    }
}
